{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","raised","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCounries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAmBeA,MAff,YAAmE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,MAAMC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MAAUC,EAAS,0DAC9D,OACI,cAACC,EAAA,EAAD,CAAMC,QAASF,EAAME,QAASC,OAAS,OAAOC,UAAS,kBAAaN,GAAU,oBAAvB,YAA8CD,GAAS,gBAA9G,SACI,eAACQ,EAAA,EAAD,WAEI,cAACC,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAQ,gBAA/C,SAAgEZ,IAChE,oBAAIS,UAAS,0BAAqBP,GAAS,yBAA3C,SAAuED,IACvE,eAACU,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAQ,gBAA/C,UACKR,EADL,kB,sECPVS,EAAkB,CACtBZ,MAAO,CACLa,IAAK,UACLC,IAAK,mBACLC,QAAS,yBACTC,WAAY,KAEdC,UAAW,CACTJ,IAAK,UACLC,IAAK,oBACLC,QAAS,0BACTC,WAAY,MAEdE,OAAQ,CACNL,IAAK,UACLC,IAAK,mBACLC,QAAS,yBACTC,WAAY,MAIHG,EAAW,SAACC,GACvB,IAAIC,EAAU,YAAOD,GAQrB,OAPAC,EAAWC,MAAK,SAACC,EAAGC,GAClB,OAAID,EAAEvB,MAAQwB,EAAExB,OACN,EAED,KAGJqB,GAGII,EAAkB,SAACC,GAAD,OAC7BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MAEjCC,EAAgB,SAACT,GAAD,IAAOU,EAAP,uDAAmB,QAAnB,OAC3BV,EAAKW,KAAI,SAACC,GAAD,OACP,cAACC,EAAA,EAAD,CACEC,OAAQ,CAACF,EAAQG,YAAYC,IAAKJ,EAAQG,YAAYE,MACtD1B,MAAOC,EAAgBkB,GAAWjB,IAClCyB,UAAW1B,EAAgBkB,GAAWjB,IACtC0B,YAAa,GACbC,OACEC,KAAKC,KAAKV,EAAQF,IAAclB,EAAgBkB,GAAWd,WAN/D,SASE,cAAC2B,EAAA,EAAD,UACE,sBAAKnC,UAAU,iBAAf,UACE,qBACEA,UAAU,YACVoC,MAAO,CAAEC,gBAAgB,OAAD,OAASb,EAAQG,YAAYW,KAA7B,QAE1B,qBAAKtC,UAAU,YAAf,SAA4BwB,EAAQA,UACpC,sBAAKxB,UAAU,iBAAf,oBACUmB,IAAQK,EAAQhC,OAAO4B,OAAO,UAExC,sBAAKpB,UAAU,iBAAf,wBACcmB,IAAQK,EAAQf,WAAWW,OAAO,UAEhD,sBAAKpB,UAAU,cAAf,qBACWmB,IAAQK,EAAQd,QAAQU,OAAO,qBC7CrCmB,MAff,YAAsD,IAAvCC,EAAsC,EAAtCA,UAAWlB,EAA2B,EAA3BA,UAAWI,EAAgB,EAAhBA,OAAQe,EAAQ,EAARA,KACzC,OACI,qBAAKzC,UAAU,MAAf,SACI,eAAC,IAAD,CAAY0B,OAAUA,EAAQe,KAAQA,EAAtC,UACI,cAACC,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAEPvB,EAAcmB,EAAWlB,S,MCM3BuB,MAbf,YAA+B,IAAdL,EAAa,EAAbA,UACb,OACI,qBAAKxC,UAAU,QAAf,SACKwC,EAAUjB,KAAI,SAAAC,GAAO,OAClB,+BACI,6BAAKA,EAAQA,UACb,6BAAI,iCAASL,IAAQK,EAAQhC,OAAO4B,OAAO,oB,QCRzD0B,EAAU,CACdC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CAERC,MAAO,CACLlB,OAAQ,IAGZmB,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAa7C,GAC5B,OAAOO,IAAQsC,EAAYC,OAAOtC,OAAO,WAI/CuC,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJ1C,OAAQ,WACR2C,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTjB,SAAS,GAEXkB,MAAO,CAELC,SAAU,SAAUT,EAAOU,EAAOC,GAChC,OAAOlD,IAAQuC,GAAOtC,OAAO,YAQnCkD,EAAiB,SAAC1D,EAAMU,GAC5B,IACIiD,EADAC,EAAY,GAEhB,IAAK,IAAIC,KAAQ7D,EAAKpB,MAAO,CAC3B,GAAI+E,EAAe,CACjB,IAAIG,EAAe,CACjBC,EAAGF,EACHG,EAAGhE,EAAKU,GAAWmD,GAAQF,GAE7BC,EAAUK,KAAKH,GAEjBH,EAAgB3D,EAAKU,GAAWmD,GAElC,OAAOD,GA2CMM,MAxCf,YAAsD,IAAD,IAAhCxD,iBAAgC,MAApB,QAAoB,EAAT1B,EAAS,+BAC3BmF,mBAAS,IADkB,mBAC5CnE,EAD4C,KACtCoE,EADsC,KAoBnD,OAjBAC,qBAAU,YACO,uCAAG,sBAAAlE,EAAA,sEACVmE,MAAM,8DACTC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACvE,GACL,IAAI4D,EAAYF,EAAe1D,EAAMU,GACrC0D,EAAQR,GACRc,QAAQC,IAAIf,MARA,2CAAH,qDAafgB,KACC,CAAClE,IAGF,qBAAKtB,UAAWJ,EAAMI,UAAtB,UACO,OAAJY,QAAI,IAAJA,OAAA,EAAAA,EAAM6E,QAAS,GACd,cAAC,OAAD,CACE7E,KAAM,CACJ8E,SAAU,CACR,CACEC,gBAAiB,yBACjBC,YAAa,UACbhF,KAAMA,KAIZkC,QAASA,O,2CCuBJ+C,MAvGf,WAAgB,IAAD,EACqBd,mBAAS,IAD9B,mBACNvC,EADM,KACKsD,EADL,OAEgBf,mBAAS,aAFzB,mBAENvD,EAFM,KAEEuE,EAFF,OAGyBhB,mBAAS,IAHlC,mBAGNpD,EAHM,KAGOqE,EAHP,OAIqBjB,mBAAS,IAJ9B,mBAINkB,EAJM,KAIKC,EAJL,OAKqBnB,mBAAS,CAAEnD,IAAK,SAAUuE,KAAM,UALrD,mBAKNC,EALM,KAKKC,EALL,OAMiBtB,mBAAS,GAN1B,mBAMNuB,EANM,KAMGC,EANH,OAO0BxB,mBAAS,IAPnC,mBAONyB,EAPM,KAOQC,EAPR,OAQqB1B,mBAAS,SAR9B,mBAQNzD,EARM,KAQKoF,EARL,KAUbzB,qBAAU,WACRC,MAAM,sCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvE,GACJoF,EAAepF,QAEhB,IAEHqE,qBAAU,YAEc,uCAAG,sBAAAlE,EAAA,sEACjBmE,MAAM,4CACXC,MAAK,SAACC,GAAD,OAAaA,EAASC,UAC3BF,MAAK,SAACvE,GACL,IAAM4B,EAAY5B,EAAKW,KAAI,SAACC,GAAD,MACzB,CACEmF,KAAMnF,EAAQA,QACdkC,MAAOlC,EAAQG,YAAYiF,SAIzB/F,EAAaF,EAASC,GAC5BsF,EAAarF,GACbiF,EAAatD,GACbiE,EAAe7F,MAdM,2CAAH,qDAiBtBiG,KACA,IAEF,IAAMC,EAAe,uCAAG,WAAOC,GAAP,iBAAAhG,EAAA,6DAChBiG,EAAcD,EAAME,OAAOvD,MAG3Bd,EAAsB,cAAhBoE,EAA8B,qCAA9B,mDAAiHA,GAJvG,SAKhB9B,MAAMtC,GACTuC,MAAK,SAACC,GAAD,OAAaA,EAASC,UAC3BF,MAAK,SAAAvE,GACJmF,EAAWiB,GACXhB,EAAepF,GACfyF,EAAa,CAACzF,EAAKe,YAAYC,IAAKhB,EAAKe,YAAYE,OACrD0E,EAAW,MAXO,2CAAH,sDAgBrB,OACE,sBAAKvG,UAAU,MAAf,UACE,sBAAKA,UAAW,YAAhB,UACE,sBAAKA,UAAU,cAAf,UACE,kDACA,cAACkH,EAAA,EAAD,CAAalH,UAAY,gBAAzB,SACE,eAACmH,EAAA,EAAD,CAAQC,QAAQ,SAASC,SAAUP,EAAiBpD,MAAQlC,EAA5D,UACE,cAAC8F,EAAA,EAAD,CAAU5D,MAAM,YAAhB,uBAEElB,EAAUjB,KAAI,SAACC,GAAD,OACd,cAAC8F,EAAA,EAAD,CAAU5D,MAAOlC,EAAQkC,MAAzB,SAAiClC,EAAQmF,kBAOjD,sBAAK3G,UAAU,aAAf,UACE,cAAC,EAAD,CAASP,OAAK,EAACC,OAAuB,UAAd4B,EAAuBxB,QAAU,SAAAyH,GAAC,OAAGb,EAAa,UAAUnH,MAAQ,oBAAoBC,MAAOyB,EAAgBU,EAAY6F,YAAa7H,MAAQsB,EAAgBU,EAAYnC,SAEpM,cAAC,EAAD,CAASE,OAAuB,cAAd4B,EAA2BxB,QAAU,SAAAyH,GAAC,OAAGb,EAAa,cAAcnH,MAAQ,YAAYC,MAAOyB,EAAgBU,EAAY8F,gBAAiB9H,MAASsB,EAAgBU,EAAYlB,aAEnM,cAAC,EAAD,CAAShB,OAAK,EAACC,OAAuB,WAAd4B,EAAwBxB,QAAU,SAAAyH,GAAC,OAAGb,EAAa,WAAWnH,MAAQ,SAASC,MAAOyB,EAAgBU,EAAY+F,aAAc/H,MAASsB,EAAgBU,EAAYjB,aAI/L,cAAC,EAAD,CACEY,UAAWA,EACXkB,UAAWgE,EACX9E,OAAU0E,EACV3D,KAAQ6D,OAIZ,cAACzG,EAAA,EAAD,CAAMG,UAAY,aAAlB,SACE,eAACC,EAAA,EAAD,WACE,uDACA,cAAC,EAAD,CAAOuC,UAAWyD,IAClB,qBAAIjG,UAAU,kBAAd,2BAA+CsB,KAC/C,cAAC,EAAD,CAAWtB,UAAU,aAAasB,UAAWA,aCtGxCqG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.3d17e56a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Infobox.css';\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, isRed,active, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} raised = 'true' className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n\r\n                <Typography className='infoBox__title' color = \"textSecondary\">{title}</Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className='infobox__total' color = \"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from 'react';\r\nimport { Map as LeafletMap , TileLayer } from \"react-leaflet\";\r\nimport './Map.css';\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType ,center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center = {center} zoom = {zoom}>\r\n                <TileLayer \r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n\r\n            </LeafletMap>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Map;\r\n","import React from 'react'\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(country => (\r\n                <tr>\r\n                    <td>{country.country}</td>\r\n                    <td><strong>{numeral(country.cases).format(\"0,0\")}</strong></td> \r\n                </tr>     \r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = 'cases',...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, { useEffect, useState } from 'react';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n \n\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\n\nimport './App.css';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country,setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCounries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data =>{\n      setCountryInfo(data);\n    })\n  }, []);\n\n  useEffect(()=> {\n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=> response.json())\n      .then((data) => {\n        const countries = data.map((country)=>(\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setCountries(countries);\n        setMapCounries(data);\n      });\n    };\n    getCountriesData();\n  },[]);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    \n\n    const url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response)=> response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n    });\n\n  };\n\n  return (\n    <div className=\"app\">\n      <div className= \"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className = \"app__dropdown\">\n            <Select variant='filled' onChange={onCountryChange} value ={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map((country)=>(\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox isRed active ={casesType === \"cases\"} onClick={ e=> setCasesType('cases')} title = \"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total ={prettyPrintStat(countryInfo.cases)} />\n\n          <InfoBox active ={casesType === \"recovered\"} onClick={ e=> setCasesType('recovered')} title = \"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total = {prettyPrintStat(countryInfo.recovered)}/>\n\n          <InfoBox isRed active ={casesType === \"deaths\"} onClick={ e=> setCasesType('deaths')} title = \"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total = {prettyPrintStat(countryInfo.deaths)}/>\n\n        </div>\n      \n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center = {mapCenter}\n          zoom = {mapZoom}\n        />\n\n      </div>\n      <Card className = \"app__right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n      \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}